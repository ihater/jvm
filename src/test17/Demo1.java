package test17;
/**
 *	性能调优案例  1：
 *		业务场景：教授绩效考核系统，服务器划分50G内存给堆
 *				 需要 联立多张表进行数据查询，还要发表的论文
 *				 论文里又有很多个图表，一份论文就几十M，是大对象
 *		
 *		需要的理论：大对象直接存在老年代，系统使用到老年代不够用的时候
 *				     直接触发  full GC，而服务器内存，堆又有50G，执行一次full GC要20秒
 *		
 *		解决方法：部署多个web容器，把堆内存改小，每个web容器内存指定为4G		
 *				  简单的Tomcat单集群。   使用Nginx做负载。做IP哈希做负载。
 *	
 *				  
 *	性能调优方案 2：
 *		业务场景：数据抓取系统，将抓到的数据，分发给其他系统
 *				 抓取节点性能低，2G，i3，jdk5，server2003
 *
 *		问题：不定期内存溢出，把堆内存加大也无济于事，反而溢出更多。
 *			  导出堆存储快照信息，没有任何信息。内存监控正常
 *
 *		处理思路：在进行NIO的 时候，为了提高性能，会申请堆外内存，本来总内存就小
 *				 堆还加大，堆外内存不够内存进行NIO，堆外内存又不能触发垃圾收集
 *		
 *		解决方法：  增大直接内存，
 *				    直接内存申请空间耗费更高的性能，当频繁申请到一定量时尤为明显
 *				    直接内存IO读写的性能要优于普通的堆内存，在多次读写操作的情况下差异明显
 *	
 *	 性能调优方案 3：
 *		 业务场景：
 */
public class Demo1 {

}
