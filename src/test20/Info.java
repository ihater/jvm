package test20;
/**
 *	类加载机制：
 *		虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验
 *		解析和初始化，最终形成被虚拟机直接使用的  java类型，这就是虚拟机的类加载机制
 *		
 *	初始化：
 *		JVM对对象的初始化有比较严谨的规定，只有遇到
 *	1、	new getstatic putstatic（读取和设置变量为静态） 或者 invokestatic（调用类的静音方法） 这4条字节码指令的时候
 *		如果类还没进行初始化，使用new关键字实例化对象的时候，读取或者设置一个类
 *		的静态字段（被final修饰，已在编译器把结果放入常量池的静态字段除外）的时候
 *		以及调用一个类的静态方法的时候。
 *· 2、 通过反射对类进行调用的时候，如果类还没进行初始化，则会触发初始化
 *	3、当初始化一个类的时候，如果发现其父类还没有初始化，就要先触发父类的初始化
 *	4、当虚拟机启动时，用户需要指定一个要执行的主类，虚拟 机会先初始化这个主类
 *		
 *
 *	不被初始化的例子：
 *		通过子类引用父类的静态字段，子类不会被初始化
 *		通过数组定义来引用类
 *		调用类的常量（final修饰的）
 */

/**
 * 这是父类
 */
public class Info {

	static{
		System.out.println("parent  init。。。。。 ");
	}
}
