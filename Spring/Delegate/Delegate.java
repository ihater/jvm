package Delegate;
/**
 * 委派模式：
 * 		类似于中介的功能，委托机制
 * 		委托类和被委托类，是两个平等的类
 * 		不关系过程，只关心结果
 * 
 * 	为何需要委派模式 ：
 * 		隐藏具体的复杂的实现逻辑。
 * 
 * 	工厂模式：通过通常来创建对象
 * 	 委派模式：通过 一个类的某个方法  去调用另一个类的方法。
 * 
 *  在Spring中的使用场景，IOC容器中，有一个Register的东西。
 *  （
 *  	为了告诉我们的 容器，在这个类被初始化的过程中，需要做很多不同的逻辑处理，
 *   	 需要多个任务执行者，分别实现各自的功能。
 *   
 *    	工厂模式是保证结果的多样性，对用户来说是只有一致性，只有一种方法调用：
 *    	工厂模式，用户需要知道哟什么可以用（默认工厂用户无感知，就有点像委派模式了）
 *    
 *    	委派模式：项目经理执行的doing方法，其实是各个执行者去执行的，用户却觉得是项目经理执行的
 *    	
 *    	动态代理：动态代理注重代理方法执行的过程，需要修改方法执行前和执行后的行为
 *    	委派模式：没有对方法行为进行修改，直接就执行了，只不过是，项目经理在调度谁去执行
 *    ）
 */
public class Delegate {

}
